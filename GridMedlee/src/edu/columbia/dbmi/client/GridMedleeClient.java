package edu.columbia.dbmi.client;

import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import edu.columbia.dbmi.medlee.CodeOptions;
import edu.columbia.dbmi.medlee.MedleeInputDocument;
import edu.columbia.dbmi.medlee.MedleeInputDocuments;
import edu.columbia.dbmi.medlee.MedleeInvocationConfiguration;
import edu.columbia.dbmi.medlee.MedleeOutputDocument;
import edu.columbia.dbmi.medlee.MedleeOutputDocuments;
import edu.columbia.dbmi.medlee.OutputFormatOptions;
import edu.columbia.dbmi.medlee.ParseModeOptions;
import edu.columbia.dbmi.medlee.StatusOptions;
import edu.columbia.dbmi.stubs.GridMedleePortType;
import edu.columbia.dbmi.stubs.service.GridMedleeServiceAddressingLocator;
import edu.columbia.dbmi.common.GridMedleeI;
import edu.columbia.dbmi.context.client.GridMedleeContextClient;
import edu.columbia.dbmi.context.service.globus.resource.GridMedleeContextResource;
import gov.nih.nci.cagrid.common.Utils;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class GridMedleeClient extends GridMedleeClientBase implements GridMedleeI {	

	public GridMedleeClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public GridMedleeClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public GridMedleeClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public GridMedleeClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(GridMedleeClient.class.getName() + " -url <service url> -dir <input dir> -out <output dir> (optional: -f <output format> -m <parser mode> -code <umls code yes or no>)");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
	    
	    Options options = new Options();
        Option code = new Option("code",true,
                "Use UMLS or not");
        Option format = new Option("f",true,
        "Output format type");
        Option mode = new Option("m",true,
        "ParserMode");
        Option url = new Option("url",true,
        "Grid Service URL");
        Option dir = new Option("dir",true,
        "Input Directory");
        Option out = new Option("out",true,
        "Output Directory");
        options.addOption(code);
        options.addOption(format);
        options.addOption(mode);
        options.addOption(url);
        options.addOption(dir);
        options.addOption(out);
	    
	    CommandLineParser parser = new PosixParser();
	    CommandLine line = null;
        try {
            line = parser.parse(options, args);
        } catch (ParseException e1) {
            e1.printStackTrace();
            System.exit(1);
        }
        
		try{
		    if(line.hasOption("url")){
			  GridMedleeClient client = new GridMedleeClient(line.getOptionValue("url"));
			  // place client calls here if you want to use this main as a
			  // test....
			  MedleeInputDocuments input = null;
			  if(line.hasOption("dir")){
			      
			            FileFilter filter = new FileFilter() {

			                public boolean accept(File pathname) {
			                    if (pathname.isDirectory()) {
			                        return false;
			                    }
			                    return true;
			                }

			            };

			            File inputsDir = new File(line.getOptionValue("dir"));
			            File[] files = inputsDir.listFiles(filter);
			            if(files==null || files.length<=0){
			                System.out.println("Input directory either does not exist or does not contain any files.");
			                System.exit(1);
			            }
			            MedleeInputDocument[] inputDocs = new MedleeInputDocument[files.length];
			            for (int i = 0; i < files.length; i++) {
			                File file = files[i];
			                MedleeInputDocument doc = new MedleeInputDocument();
			                doc.setIdentifier(file.getName());
			                try {
			                    StringBuffer sb = Utils.fileToStringBuffer(file);
			                    doc.setText(sb.toString());
			                } catch (IOException e) {
			                    e.printStackTrace();
			                }
			                inputDocs[i] = doc;
			            }
			           
			            input = new MedleeInputDocuments(inputDocs);
			      
			  } else {
			      usage();
			      System.exit(1);
			  }
			  
			  MedleeInvocationConfiguration conf = new MedleeInvocationConfiguration();
			  if(line.hasOption("code")){
			      conf.setCode(CodeOptions.fromString(line.getOptionValue("code")));
			  } else {
			      conf.setCode(CodeOptions.no);
			  }
			  
			  if(line.hasOption("m")){
                  conf.setParseMode(ParseModeOptions.fromString(line.getOptionValue("m")));
              } else {
                  conf.setParseMode(ParseModeOptions.best);
              }
			  
			  if(line.hasOption("f")){
                  conf.setOutputFormat(OutputFormatOptions.fromString(line.getOptionValue("f")));
              } else {
                  conf.setOutputFormat(OutputFormatOptions.xml);
              }
			  
			  GridMedleeContextClient contextClient = client.invokeGridMedlee(conf, input);
			  
			  while(!contextClient.getStatus().equals(StatusOptions.COMPLETE)){
			      Thread.sleep(2000);
			  }
			  MedleeOutputDocuments outputDocs = contextClient.getOutputDocuments();
			  System.out.println("Retrieved results from medlee service containing " + outputDocs.getMedleeOutputDocument().length + " documents.");
			  
			  if(line.hasOption("out")){
			      File outputFile = new File(line.getOptionValue("out"));
                  outputFile.mkdirs();			      
			      for (int i = 0; i < outputDocs.getMedleeOutputDocument().length; i++) {
                      MedleeOutputDocument doc = outputDocs.getMedleeOutputDocument(i);
                      FileWriter writer = new FileWriter(line.getOptionValue("out") + File.separator + doc.getIdentifier());
                      writer.write(doc.getXMLOutput());
                      writer.close();
                  }
			  } else {
			      usage();
	               System.exit(1);
			  }
		    } else {
		        usage();
		        System.exit(1);
		    }
			 
	
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public edu.columbia.dbmi.context.client.GridMedleeContextClient invokeGridMedlee(edu.columbia.dbmi.medlee.MedleeInvocationConfiguration medleeInvocationConfiguration,edu.columbia.dbmi.medlee.MedleeInputDocuments medleeInputDocuments) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"invokeGridMedlee");
    edu.columbia.dbmi.stubs.InvokeGridMedleeRequest params = new edu.columbia.dbmi.stubs.InvokeGridMedleeRequest();
    edu.columbia.dbmi.stubs.InvokeGridMedleeRequestMedleeInvocationConfiguration medleeInvocationConfigurationContainer = new edu.columbia.dbmi.stubs.InvokeGridMedleeRequestMedleeInvocationConfiguration();
    medleeInvocationConfigurationContainer.setMedleeInvocationConfiguration(medleeInvocationConfiguration);
    params.setMedleeInvocationConfiguration(medleeInvocationConfigurationContainer);
    edu.columbia.dbmi.stubs.InvokeGridMedleeRequestMedleeInputDocuments medleeInputDocumentsContainer = new edu.columbia.dbmi.stubs.InvokeGridMedleeRequestMedleeInputDocuments();
    medleeInputDocumentsContainer.setMedleeInputDocuments(medleeInputDocuments);
    params.setMedleeInputDocuments(medleeInputDocumentsContainer);
    edu.columbia.dbmi.stubs.InvokeGridMedleeResponse boxedResult = portType.invokeGridMedlee(params);
    EndpointReferenceType ref = boxedResult.getGridMedleeContextReference().getEndpointReference();
    return new edu.columbia.dbmi.context.client.GridMedleeContextClient(ref);
    }
  }

}
