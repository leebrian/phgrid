package gov.cdc.ncphi.phgrid.poicondai;

import java.util.Calendar;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * Unit test for simple App.
 */
public class AppTest 
    extends TestCase
{
    /**
     * Create the test case
     *
     * @param testName name of the test case
     */
    public AppTest( String testName )
    {
        super( testName );
    }

    /**
     * @return the suite of tests being tested
     */
    public static Test suite()
    {
        return new TestSuite( AppTest.class );
    }

    /**
     * Rigourous Test :-)
     */
    public void testApp()
    {
    	Calendar startDate = Calendar.getInstance();
    	startDate.set(2008, 6, 7);
    	Calendar endDate = Calendar.getInstance();
    	endDate.set(2008, 7, 26);
		NPDSTimeServiceFetcher ntsf = new NPDSTimeServiceFetcher();
    	NPDSTimeSeriesByRegion npdsts = ntsf.getZipcodeResults(
				"8", 
				"CO,UT", 
				"", 
				startDate, 
				endDate, 
				"10", 
				"11", 
				"", 
				"TCV", 
				"");
        assertTrue(npdsts != null && npdsts.getAll() != null );
		assertFalse(npdsts.getAll().isEmpty());
		
		NPDSTimeSeries npts = ntsf.getGenericResults(
				"8", 
				"CO,UT", 
				"", 
				startDate, 
				endDate, 
				"10", 
				"11", 
				"", 
				"TCV", 
				"");
		assertTrue(npts != null && npts.getCountList() != null );
		assertFalse(npts.getCountList().isEmpty());
		
		npdsts = ntsf.getStateResults(
				"8", 
				"CO,UT", 
				"", 
				startDate, 
				endDate, 
				"10", 
				"11", 
				"", 
				"TCV", 
				"");
		assertTrue(npdsts != null && npdsts.getAll() != null );
		assertFalse(npdsts.getAll().isEmpty());
		
		npdsts = ntsf.getZipcodeResults(
				"8", 
				"CO", 
				"80002,80003,80004,80005,80007,80010,80011,80012,80013,80014,80015,80016,80017,80018,80019,80020,80021,80022,80026,80027,80030,80031,80033,80101,80102,80103,80104,80105,80106,80107,80108,80109,80110,80111,80112,80113,80116,80117,80118,80120,80121,80122,80123,80124,80125,80126,80127,80128,80129,80130,80132,80133,80134,80135,80136,80137,80138,80202,80203,80204,80205,80206,80207,80208,80209,80210,80211,80212,80214,80215,80216,80218,80219,80220,80221,80222,80223,80224,80225,80226,80227,80228,80229,80230,80231,80232,80233,80234,80235,80236,80237,80238,80239,80241,80246,80247,80249,80260,80262,80301,80302,80303,80304,80305,80309,80401,80403,80421,80422,80423,80424,80428,80430,80433,80435,80439,80440,80442,80443,80446,80447,80449,80451,80452,80455,80456,80459,80461,80463,80465,80466,80467,80468,80470,80478,80479,80480,80481,80482,80487,80498,80501,80503,80504,80510,80512,80513,80514,80515,80516,80517,80521,80523,80524,80525,80526,80528,80530,80534,80535,80536,80537,80538,80540,80542,80543,80545,80549,80550,80601,80602,80603,80610,80611,80612,80615,80620,80621,80624,80631,80634,80639,80640,80642,80643,80644,80645,80648,80649,80650,80651,80652,80653,80654,80701,80705,80720,80721,80722,80723,80726,80727,80728,80729,80731,80733,80734,80735,80736,80737,80740,80741,80742,80743,80744,80745,80747,80749,80750,80751,80754,80755,80757,80758,80759,80801,80802,80804,80805,80807,80808,80809,80810,80812,80813,80814,80815,80816,80817,80818,80820,80821,80822,80823,80824,80825,80827,80828,80829,80830,80831,80832,80833,80834,80835,80836,80840,80861,80863,80864,80903,80904,80905,80906,80907,80908,80909,80910,80911,80913,80914,80915,80916,80917,80918,80919,80920,80921,80922,80923,80924,80925,80926,80927,80928,80929,80930,80951,81001,81003,81004,81005,81006,81007,81008,81019,81020,81021,81022,81023,81025,81027,81029,81036,81039,81040,81041,81043,81044,81045,81047,81049,81050,81052,81054,81055,81057,81058,81059,81062,81063,81064,81067,81069,81071,81073,81076,81081,81082,81084,81087,81089,81090,81091,81092,81101,81102,81120,81121,81122,81123,81125,81130,81132,81133,81136,81137,81140,81143,81144,81146,81147,81149,81151,81152,81153,81154,81155,81201,81210,81211,81212,81220,81223,81224,81226,81228,81230,81231,81233,81235,81236,81239,81240,81241,81243,81251,81252,81253,81301,81303,81320,81321,81323,81324,81325,81326,81327,81328,81331,81334,81335,81401,81410,81411,81413,81415,81416,81418,81419,81422,81423,81424,81425,81426,81427,81428,81430,81431,81432,81433,81434,81435,81501,81503,81504,81505,81506,81520,81521,81522,81524,81525,81526,81527,81601,81610,81611,81615,81621,81623,81624,81625,81630,81631,81632,81633,81635,81637,81638,81639,81640,81641,81642,81643,81647,81648,81650,81652,81653,81654,81657", 
				startDate, 
				endDate, 
				"10", 
				"11", 
				"", 
				"TCV", 
				"");
        assertTrue(npdsts != null && npdsts.getAll() != null );
		assertFalse(npdsts.getAll().isEmpty());

    }
}
